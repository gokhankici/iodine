#!/bin/zsh

THIS_DIR=${0:A:h}
CONF_FILE=$THIS_DIR/configuration.sh

source $CONF_FILE

zparseopts -D -E -- \
	u=UNIT -unit=UNIT \
	-continue=CONTINUE \
	-no-output=NO_OUT \
	-times:=TIMES \
	n:=NAME -name:=NAME \
	h=HELP -help=HELP

if [[ -n "$HELP" ]]; then
	echo "${0:t} options:"
	echo "    (u)nit, continue, no-output, times <N>, (n)ame <S>, (h)elp"
	exit 0
fi

function blue()  { print -P "%F{blue}%B$1%b%f" }
function green() { print -P "%F{green}%B$1%b%f" }
function red()   { print -P "%F{red}%B$1%b%f" }

BMKS_DIR="$IVL_DIR/benchmarks"
MIPS_DIR="$BMKS_DIR/472-mips-pipelined"
CRYPTO_DIR="$BMKS_DIR/crypto_cores"

# --name simple
typeset -A SIMPLE_TESTS
SIMPLE_TESTS=( \
	"01 - 01 - tr-test-1"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-1.v" \
	"01 - 02 - tr-test-2"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-2.v" \
	"01 - 03 - tr-test-3"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-3.v" \
	"01 - 04 - tr-test-4"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-4.v" \
	"01 - 05 - tr-test-5"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-5.v" \
	"01 - 06 - tr-test-6"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-6.v" \
	"01 - 07 - stall hand"    "-M stalling_cpu  $THIS_DIR/examples/verilog/stall.v" \
	"01 - 08 - secverilog-01" "-M test          $THIS_DIR/test/verilog/pos/secverilog-01.v" \
	"01 - 09 - tr-test-9"     "-M test          $THIS_DIR/test/verilog/pos/tr-test-9.v" \
	"01 - 10 - tr-test-10"    "-M test          $THIS_DIR/test/verilog/pos/tr-test-10.v" \
	"01 - 12 - merge-02"      "-M test          $THIS_DIR/test/verilog/pos/merge-02.v"   \
	"01 - 13 - merge-03"      "-M test          $THIS_DIR/test/verilog/pos/merge03.v"   \
	"01 - 14 - merge-04"      "-M test          $THIS_DIR/test/verilog/pos/merge04.v"   \
	)

# --name mips-stub
typeset -A MIPS_STUB_TESTS
MIPS_STUB_TESTS=( \
	"02 - 01 - mips fragment"       "-M mips_pipeline $MIPS_DIR/472-mips-fragment.v"   \
	"02 - 02 - mips fragment v2"    "-M mips_pipeline $MIPS_DIR/472-mips-fragment-2.v" \
	"02 - 03 - mips fragment v3"    "-M mips_pipeline $MIPS_DIR/472-mips-fragment-3.v" \
	"02 - 04 - mips fragment v4"    "-M mips_pipeline $MIPS_DIR/472-mips-fragment-4.v" \
	)

# --name mips-module
typeset -A MIPS_MODULE_TESTS
MIPS_MODULE_TESTS=( \
	"03 - 01 - reg32"               "-M reg32            $MIPS_DIR/reg32.v" \
	# "03 - 02 - mux2"                "-M mux2             $MIPS_DIR/mux2.v" \
	"03 - 03 - mux3"                "-M mux3             $MIPS_DIR/mux3.v" \
	"03 - 04 - control_pipeline"    "-M control_pipeline $MIPS_DIR/control_pipeline.v" \
	"03 - 05 - mem32-stub"          "-M mem32            $MIPS_DIR/mem32-stub.v" \
	"03 - 06 - alu"                 "-M alu              $MIPS_DIR/alu.v" \
	"03 - 07 - alu_ctl"             "-M alu_ctl          $MIPS_DIR/alu_ctl.v" \
	# "03 - 08 - add32"               "-M add32            $MIPS_DIR/add32.v" \
	"03 - 09 - rom32"               "-M rom32            $MIPS_DIR/rom32.v" \
	"03 - 10 - reg_file"            "-M reg_file         $MIPS_DIR/reg_file.v" \
	)

# --name major
typeset -A MAJOR_TESTS
MAJOR_TESTS=( \
	"10 - 01 - mips full"    "-M mips_pipeline $MIPS_DIR/mips_pipeline.v" \
	"10 - 02 - yarvi"        "-M yarvi         $BMKS_DIR/yarvi/shared/yarvi.v" \
	"10 - 03 - sha256"       "-M sha256        $CRYPTO_DIR/sha_core/trunk/rtl/sha256.v" \
	)

# --name neg
typeset -A NEG_TESTS_SIMPLE
NEG_TESTS_SIMPLE=( \
	"-01 - 01 - neg-test-1"    "-M test $THIS_DIR/test/verilog/neg/neg-test-1.v" \
	"-01 - 02 - neg-test-2"    "-M test $THIS_DIR/test/verilog/neg/neg-test-2.v" \
	# "-01 - 03 - neg-test-3"    "-M test $THIS_DIR/test/verilog/neg/neg-test-3.v" \
	# "-01 - 04 - neg-test-4"    "-M test $THIS_DIR/test/verilog/neg/neg-test-4.v" \
	"-01 - 05 - neg-test-5"    "-M test $THIS_DIR/test/verilog/neg/neg-test-5.v" \
	"-01 - 06 - tp"            "-M test $THIS_DIR/test/verilog/neg/tp.v" \
	"-01 - 07 - neg-merge-01"  "-M test $THIS_DIR/test/verilog/neg/neg-merge-01.v" \

	"-02 - 01 - secver-neg-01" "-M test $THIS_DIR/test/verilog/neg/secverilog-neg-01.v" \
	"-02 - 02 - secver-neg-02" "-M test $THIS_DIR/test/verilog/neg/secverilog-neg-02.v" \
	)

if [[ -z "$TIMES" ]]; then
	REPLICATE=1
else
	REPLICATE="$TIMES[2]"
fi

if   [[ "$NAME[2]" == "simple" ]]; then
	typeset -A TESTS
	TESTS=( ${(kv)SIMPLE_TESTS} )

elif [[ "$NAME[2]" == "mips-stub" ]]; then
	typeset -A TESTS
	TESTS=( ${(kv)MIPS_STUB_TESTS} )

elif [[ "$NAME[2]" == "mips-module" ]]; then
	typeset -A TESTS
	TESTS=( ${(kv)MIPS_MODULE_TESTS} )

elif [[ "$NAME[2]" == "major" ]]; then
	typeset -A TESTS
	TESTS=( ${(kv)MAJOR_TESTS} )

elif [[ "$NAME[2]" == "neg" ]]; then
	typeset -A NEG_TESTS
	NEG_TESTS=( ${(kv)NEG_TESTS_SIMPLE} )

elif [[ -z "$NAME" ]]; then
	typeset -A TESTS
	TESTS=( \
		${(kv)SIMPLE_TESTS} \
		${(kv)MIPS_STUB_TESTS} \
		${(kv)MIPS_MODULE_TESTS} \
		${(kv)MAJOR_TESTS} \
		)

	typeset -A NEG_TESTS
	NEG_TESTS=( ${(kv)NEG_TESTS_SIMPLE} )
else
	echo "unrecognized --name argument: $NAME[2]" >&2
	exit 1
fi

echo

function run_unit_tests() {
	blue "================================================================================"
	blue "   RUNNING UNIT TESTS"
	blue "================================================================================"

	stack test --fast

	last_err=$?

	if [[ $last_err -ne 0 ]]; then
		echo
		red "================================================================================"
		red "   UNIT TESTS FAILED !"
		red "================================================================================"
		exit 1
	fi
}

if [[ -n "$UNIT" ]]; then
	run_unit_tests
fi

run_verylog() {
	local cmd
	cmd=$THIS_DIR/verylog

	if [[ -z "$NO_OUT" ]]; then
		echo ${(@s/ /)cmd} $@
	fi

	local last_err
	if [[ -z "$NO_OUT" ]]; then
		${(@s/ /)cmd} $@
		last_err=$?
	else
		${(@s/ /)cmd} $@ >/dev/null
		last_err=$?
	fi

	return $last_err
}


for ((i=0; i<$REPLICATE; i++)); do

	blue "=== RUN $i ====================================================================="

	for test_name in ${(ok)TESTS}; do
		if [[ -z "$NO_OUT" ]]; then
			blue "================================================================================"
			blue "   RUNNING $test_name"
			blue "================================================================================"
		fi

		test_input="${TESTS[$test_name]}"
		local -a test_arr
		test_arr=("${(@s/ /)test_input}")

		run_verylog ${test_arr} $@

		last_err=$?

		if [[ $last_err -ne 0 ]]; then
			red "================================================================================"
			red "   TEST '$test_name' FAILED !"
			red "================================================================================"

			if [[ -z "$CONTINUE" ]]; then
				exit 1
			fi	
		else
			green "================================================================================"
			green "   TEST '$test_name' PASSED !"
			green "================================================================================"
		fi
	done

	for test_name in ${(ok)NEG_TESTS}; do
		if [[ -z "$NO_OUT" ]]; then
			blue "================================================================================"
			blue "   RUNNING NEG $test_name"
			blue "================================================================================"
		fi

		test_input="${NEG_TESTS[$test_name]}"
		local -a test_arr
		test_arr=("${(@s/ /)test_input}")


		run_verylog ${test_arr} $@

		last_err=$?

		if [[ $last_err -eq 0 ]]; then
			red "================================================================================"
			red "   NEG TEST '$test_name' FAILED !" 1>&2
			red "================================================================================"

			if [[ -z "$CONTINUE" ]]; then
				exit 1
			fi	
		else
			green "================================================================================"
			green "   NEG TEST '$test_name' PASSED !" 1>&2
			green "================================================================================"
		fi
	done
done

if [[ -z "$CONTINUE" ]]; then
    green "================================================================================"
    green "   ALL TESTS PASSED !"
    green "================================================================================"
fi
