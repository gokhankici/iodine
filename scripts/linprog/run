#!/usr/bin/env python3.6

import argparse
from collections import namedtuple
from os.path import realpath, dirname, join
import os.path as p
import subprocess
import sys

from annotation import Benchmark

THIS_DIR = realpath(dirname(__file__))
PROJECT_ROOT = join(THIS_DIR, "../../")
BENCHMARK_DIR = join(PROJECT_ROOT, "benchmarks")

# name, file and module pairs of the benchmarks
CONFIG = [("ctalu", "xcrypto-ref/rtl/coprocessor/scarv_cop_palu.v", "scarv_cop_palu"),
          ("mips", "472-mips-pipelined/mips_pipeline.v", "mips_pipeline"),
          ("yarvi", "yarvi/shared/yarvi.v", "yarvi"),
          ("sha", "crypto_cores/sha_core/trunk/rtl/sha256.v", "sha256"),
          ("fpu", "fpu/verilog/fpu.v", "fpu"),
          ("fpu-div", "fpu2/divider/divider.v", "divider"),
          ("modexp", "crypto_cores/RSA4096/ModExp2/ModExp.v", "ModExp")]

def mk_bmk(filename, module):
    full_filename = join(BENCHMARK_DIR, filename)
    h, t = p.split(full_filename)
    n, _ = p.splitext(t)
    a = join(h, "annot-{}.json".format(n))
    return Benchmark(filename=full_filename,
                     module=module,
                     annotfile=a)

BENCHMARKS = {n: mk_bmk(f, m) for n, f, m in CONFIG}


def err(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def run(b):
    # creates the cplex.json file
    b.run_abduction()

    # run assumption.py and create the annot-last.json file
    tmp_annotfile = "annot-last.json"
    with open(tmp_annotfile, "w") as f:
        args = [join(THIS_DIR, "assumptions.py"),
                "cplex.json",
                b.annotfile]
        r = subprocess.run(args, stdout=f)
    if r.returncode != 0:
        sys.exit(r.returncode)

    subprocess.run(["cat", tmp_annotfile])

    # re-run iodine with the new annot file
    b2 = b.with_annot(tmp_annotfile)
    b2.run_iodine()

if __name__ == "__main__":
    ap = argparse.ArgumentParser(description="""
    Extract the CFG of the verilog program and run the abduction script.
    """)
    ap.add_argument("-b", "--benchmark", choices=BENCHMARKS.keys(), help="Benchmark name")
    ap.add_argument("-f", "--filename", help="Verilog file")
    ap.add_argument("-m", "--module", help="Module name")
    ap.add_argument("-a", "--annotation", help="Annotation JSON file")
    args = ap.parse_args()

    if args.benchmark:
        run(BENCHMARKS[args.benchmark])
    elif args.filename and args.module and args.annotation:
        b = Benchmark(filename=args.filename,
                      module=args.module,
                      annotfile=args.annotation)
        run(b)
    else:
        ap.print_help()
        sys.exit(1)
