#!/usr/bin/env python3.6

import argparse
from os.path import join
import os.path as p
import subprocess
import sys
from config import BENCHMARK_DIR, LINPROG_DIR, DEBUG
from benchmark import Benchmark

# name, file and module of the benchmarks
CONFIG = [("ctalu",
           "xcrypto-ref/rtl/coprocessor/scarv_cop_palu.v",
           "scarv_cop_palu"),
          ("mips",
           "472-mips-pipelined/mips_pipeline.v",
           "mips_pipeline"),
          ("yarvi",
           "yarvi/shared/yarvi.v",
           "yarvi"),
          ("sha",
           "crypto_cores/sha_core/trunk/rtl/sha256.v",
           "sha256"),
          ("fpu",
           "fpu/verilog/fpu.v",
           "fpu"),
          ("fpu-div",
           "fpu2/divider/divider.v",
           "divider"),
          ("modexp",
           "crypto_cores/RSA4096/ModExp2/ModExp.v",
           "ModExp")]


def mk_bmk(filename, module):
    full_filename = join(BENCHMARK_DIR, filename)
    h, t = p.split(full_filename)
    n, _ = p.splitext(t)
    a = join(h, "annot-{}.json".format(n))
    return Benchmark(filename=full_filename,
                     module=module,
                     annotfile=a)


BENCHMARKS = {n: mk_bmk(f, m) for n, f, m in CONFIG}
TMP_ANNOTFILE = "annot-last.json"


def err(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def create_tmp_annotfile(b):
    # creates the cplex.json file
    b.run_abduction()

    # run assumption.py and create the annot-last.json file
    with open(TMP_ANNOTFILE, "w") as f:
        args = [join(LINPROG_DIR, "assumptions.py"),
                "cplex.json",
                b.annotfile]
        r = subprocess.run(args, stdout=f)
    if r.returncode != 0:
        sys.exit(r.returncode)

    if DEBUG:
        subprocess.run(["cat", TMP_ANNOTFILE])


def run(b, skip):
    if not skip:
        create_tmp_annotfile(b)

    # re-run iodine with the new annot file
    b2 = b.with_annot(TMP_ANNOTFILE)
    b2.run_iodine()


if __name__ == "__main__":
    ap = argparse.ArgumentParser(description="""
    Extract the CFG of the verilog program and run the abduction script.
    """)
    ap.add_argument("-b", "--benchmark", choices=BENCHMARKS.keys(),
                    help="Benchmark name")
    ap.add_argument("-f", "--filename", help="Verilog file")
    ap.add_argument("-m", "--module", help="Module name")
    ap.add_argument("-a", "--annotation", help="Annotation JSON file")
    ap.add_argument("--skip", action="store_true",
                    help="Just run the benchmark with temp annotation file")
    args = ap.parse_args()

    if args.benchmark:
        run(BENCHMARKS[args.benchmark], args.skip)
    elif args.filename and args.module and args.annotation:
        b = Benchmark(filename=args.filename,
                      module=args.module,
                      annotfile=args.annotation)
        run(b, args.skip)
    else:
        ap.print_help()
        sys.exit(1)
