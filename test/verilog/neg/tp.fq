Saving Binary Query: /usr/local/home/rami/verilog/verylog-hs/test/verilog/neg/.liquid/.neg-test-0.pl.bfq

Saving Text Query: /usr/local/home/rami/verilog/verylog-hs/test/verilog/neg/.liquid/.neg-test-0.pl.fq



// Config {srcFile = "/usr/local/home/rami/verilog/verylog-hs/test/verilog/neg/.neg-test-0.pl", cores = Nothing, minPartSize = 500, maxPartSize = 700, solver = z3, linear = False, stringTheory = False, defunction = False, allowHO = False, allowHOqs = False, eliminate = some, elimBound = Nothing, elimStats = False, solverStats = False, metadata = True, stats = False, parts = False, save = True, minimize = False, minimizeQs = False, minimizeKs = False, minimalSol = False, gradual = False, ginteractive = False, extensionality = False, alphaEquivalence = False, betaEquivalence = False, normalForm = False, autoKuts = False, nonLinCuts = False, noslice = False, rewriteAxioms = False}




expand []


qualif Eq1(v  : int, x as (VL_ . $1) : int, y as (VR_ . $1) : int): ((x = y)) // (line 0, column 0)
qualif Eq2(v  : int, x as (VLP_ . $1) : int, y as (VRP_ . $1) : int): ((x = y)) // (line 0, column 0)
qualif Eq3(v  : int, x as (VLT_ . $1) : int, y as (VRT_ . $1) : int): ((x = y)) // (line 0, column 0)
qualif Eq4(v  : int, x as (VLTP_ . $1) : int, y as (VRTP_ . $1) : int): ((x = y)) // (line 0, column 0)
qualif Zero1(v  : int, x as (VLT_ . $1) : int): ((x = 0)) // (line 0, column 0)
qualif Zero2(v  : int, x as (VRT_ . $1) : int): ((x = 0)) // (line 0, column 0)
qualif Zero3(v  : int, x as (VLTP_ . $1) : int): ((x = 0)) // (line 0, column 0)
qualif Zero4(v  : int, x as (VRTP_ . $1) : int): ((x = 0)) // (line 0, column 0)




constant uf_0_in2 : (func(0, [int; int; int]))
constant uf_2_const_expr : (int)
constant uf_1_in2 : (func(1, [int; int; int]))




bind 1 zero : {v : int | [(v = 0)]}
bind 2 one : {v : int | [(v = 1)]}
bind 3 VL_in2 : {v : int | []}
bind 4 VL_in1 : {v : int | []}
bind 5 VLT_in1 : {v : int | []}
bind 6 VLT_in2 : {v : int | []}
bind 7 VRT_in1 : {v : int | []}
bind 8 VRT_in2 : {v : int | []}
bind 9 VR_in2 : {v : int | []}
bind 10 VR_in1 : {v : int | []}
bind 11 VLT1_fast : {v : int | []}
bind 12 VL1_fast : {v : int | []}
bind 13 VL_uf_0_in2 : {v : int | []}
bind 14 VRT1_fast : {v : int | []}
bind 15 VR1_fast : {v : int | []}
bind 16 VR_uf_0_in2 : {v : int | []}
bind 17 VL_out : {v : int | []}
bind 18 VLT_temp : {v : int | []}
bind 19 VLT_out : {v : int | []}
bind 20 VRT_temp : {v : int | []}
bind 21 VRT_out : {v : int | []}
bind 22 VR_out : {v : int | []}
bind 23 VLT1_out : {v : int | []}
bind 24 VL1_out : {v : int | []}
bind 25 VL_uf_2_const_expr : {v : int | []}
bind 26 VL_temp : {v : int | []}
bind 27 VRT1_out : {v : int | []}
bind 28 VR1_out : {v : int | []}
bind 29 VR_uf_2_const_expr : {v : int | []}
bind 30 VR_temp : {v : int | []}
bind 31 VLT1_temp : {v : int | []}
bind 32 VL1_temp : {v : int | []}
bind 33 VL_uf_1_in2 : {v : int | []}
bind 34 VRT1_temp : {v : int | []}
bind 35 VR1_temp : {v : int | []}
bind 36 VR_uf_1_in2 : {v : int | []}




constraint:
  env [1; 3; 4; 5; 6; 7; 8; 9; 10]
  lhs {v##1 : int | []}
  rhs {v##1 : int | [$inv5[VRT_in1:=zero][VRT_in2:=zero][VL_in2:=VR_in2][VLT_in2:=zero][v:=v##1][VL_in1:=VR_in1][VLT_in1:=zero]]}
  id 1 tag []
  // META constraint id 1 : (init of block 5) always block id: 5


constraint:
  env [2; 5; 6; 7; 8]
  lhs {v##2 : int | [$inv5[v:=v##2]]}
  rhs {v##2 : int | [$inv5[VRT_in1:=one][VRT_in2:=one][VLT_in2:=one][v:=v##2][VLT_in1:=one]]}
  id 2 tag []
  // META constraint id 2 : (re-tag of block 5) always block id: 5


constraint:
  env [3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16]
  lhs {v##3 : int | [$inv5[v:=v##3];
                     (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                     (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                     (VLT1_fast = (VLT_in1 + VLT_in2));
                     (VL1_fast = VL_uf_0_in2);
                     (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                     (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                     (VRT1_fast = (VRT_in1 + VRT_in2));
                     (VR1_fast = VR_uf_0_in2)]}
  rhs {v##3 : int | [$inv5[v:=v##3]]}
  id 3 tag []
  // META constraint id 3 : (next of block 5) always block id: 5


constraint:
  env [1; 3; 4; 5; 6; 7; 8; 9; 10; 17; 18; 19; 20; 21; 22]
  lhs {v##4 : int | []}
  rhs {v##4 : int | [$inv4[VRT_in1:=zero][VRT_out:=zero][VLT_temp:=zero][VL_out:=VR_out][VRT_in2:=zero][VL_in2:=VR_in2][VLT_in2:=zero][VLT_out:=zero][v:=v##4][VL_in1:=VR_in1][VLT_in1:=zero][VRT_temp:=zero]]}
  id 4 tag []
  // META constraint id 4 : (init of block 4) always block id: 4


constraint:
  env [1; 2; 5; 6; 7; 8; 18; 19; 20; 21]
  lhs {v##5 : int | [$inv4[v:=v##5]]}
  rhs {v##5 : int | [$inv4[VRT_in1:=one][VRT_out:=zero][VLT_temp:=zero][VRT_in2:=one][VLT_in2:=one][VLT_out:=zero][v:=v##5][VLT_in1:=one][VRT_temp:=zero]]}
  id 5 tag []
  // META constraint id 5 : (re-tag of block 4) always block id: 4


constraint:
  env [1;
       2;
       3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       11;
       12;
       13;
       14;
       15;
       16;
       17;
       18;
       19;
       20;
       21;
       22;
       23;
       24;
       25;
       26;
       27;
       28;
       29;
       30]
  lhs {v##6 : int | [$inv4[v:=v##6];
                     (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                     (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                     (VLT1_fast = (VLT_in1 + VLT_in2));
                     (VL1_fast = VL_uf_0_in2);
                     ((VL1_fast >= one) => && [&& [(VL_uf_2_const_expr = uf_2_const_expr);
                                                   (VR_uf_2_const_expr = uf_2_const_expr)];
                                               (VLT1_out = (VLT1_fast + zero));
                                               (VL1_out = VL_uf_2_const_expr)]);
                     ((~ ((VL1_fast >= one))) => && [(VLT1_out = (VLT1_fast + VLT_temp));
                                                     (VL1_out = VL_temp)]);
                     (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                     (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                     (VRT1_fast = (VRT_in1 + VRT_in2));
                     (VR1_fast = VR_uf_0_in2);
                     ((VR1_fast >= one) => && [&& [(VL_uf_2_const_expr = uf_2_const_expr);
                                                   (VR_uf_2_const_expr = uf_2_const_expr)];
                                               (VRT1_out = (VRT1_fast + zero));
                                               (VR1_out = VR_uf_2_const_expr)]);
                     ((~ ((VR1_fast >= one))) => && [(VRT1_out = (VRT1_fast + VRT_temp));
                                                     (VR1_out = VR_temp)])]}
  rhs {v##6 : int | [$inv4[VRT_out:=VRT1_out][VL_out:=VL1_out][VLT_out:=VLT1_out][v:=v##6][VR_out:=VR1_out]]}
  id 6 tag []
  // META constraint id 6 : (next of block 4) always block id: 4


constraint:
  env [1; 3; 4; 5; 6; 7; 8; 9; 10; 18; 20]
  lhs {v##7 : int | []}
  rhs {v##7 : int | [$inv3[VRT_in1:=zero][VLT_temp:=zero][VRT_in2:=zero][VL_in2:=VR_in2][VLT_in2:=zero][v:=v##7][VL_in1:=VR_in1][VLT_in1:=zero][VRT_temp:=zero]]}
  id 7 tag []
  // META constraint id 7 : (init of block 3) always block id: 3


constraint:
  env [1; 2; 5; 6; 7; 8; 18; 20]
  lhs {v##8 : int | [$inv3[v:=v##8]]}
  rhs {v##8 : int | [$inv3[VRT_in1:=one][VLT_temp:=zero][VRT_in2:=one][VLT_in2:=one][v:=v##8][VLT_in1:=one][VRT_temp:=zero]]}
  id 8 tag []
  // META constraint id 8 : (re-tag of block 3) always block id: 3


constraint:
  env [3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       18;
       20;
       26;
       30;
       31;
       32;
       33;
       34;
       35;
       36]
  lhs {v##9 : int | [$inv3[v:=v##9];
                     (VL_uf_1_in2 = (uf_1_in2 VL_in2 VL_in1));
                     (VR_uf_1_in2 = (uf_1_in2 VR_in2 VR_in1));
                     (VLT1_temp = (VLT_in1 + VLT_in2));
                     (VL1_temp = VL_uf_1_in2);
                     (VL_uf_1_in2 = (uf_1_in2 VL_in2 VL_in1));
                     (VR_uf_1_in2 = (uf_1_in2 VR_in2 VR_in1));
                     (VRT1_temp = (VRT_in1 + VRT_in2));
                     (VR1_temp = VR_uf_1_in2)]}
  rhs {v##9 : int | [$inv3[VLT_temp:=VLT1_temp][VR_temp:=VR1_temp][v:=v##9][VL_temp:=VL1_temp][VRT_temp:=VRT1_temp]]}
  id 9 tag []
  // META constraint id 9 : (next of block 3) always block id: 3


constraint:
  env [3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       17;
       18;
       19;
       20;
       21;
       22;
       26;
       30;
       31;
       32;
       33;
       34;
       35;
       36]
  lhs {v##10 : int | [$inv3[v:=v##10];
                      $inv4[v:=v##10];
                      (VL_uf_1_in2 = (uf_1_in2 VL_in2 VL_in1));
                      (VR_uf_1_in2 = (uf_1_in2 VR_in2 VR_in1));
                      (VLT1_temp = (VLT_in1 + VLT_in2));
                      (VL1_temp = VL_uf_1_in2);
                      (VL_uf_1_in2 = (uf_1_in2 VL_in2 VL_in1));
                      (VR_uf_1_in2 = (uf_1_in2 VR_in2 VR_in1));
                      (VRT1_temp = (VRT_in1 + VRT_in2));
                      (VR1_temp = VR_uf_1_in2)]}
  rhs {v##10 : int | [$inv4[VLT_temp:=VLT1_temp][VR_temp:=VR1_temp][v:=v##10][VL_temp:=VL1_temp][VRT_temp:=VRT1_temp]]}
  id 10 tag []
  // META constraint id 10 : (interference with 3) always block id: 4


constraint:
  env [1;
       2;
       3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       11;
       12;
       13;
       14;
       15;
       16;
       18;
       20;
       23;
       24;
       25;
       26;
       27;
       28;
       29;
       30]
  lhs {v##11 : int | [$inv4[v:=v##11];
                      $inv3[v:=v##11];
                      (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                      (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                      (VLT1_fast = (VLT_in1 + VLT_in2));
                      (VL1_fast = VL_uf_0_in2);
                      ((VL1_fast >= one) => && [&& [(VL_uf_2_const_expr = uf_2_const_expr);
                                                    (VR_uf_2_const_expr = uf_2_const_expr)];
                                                (VLT1_out = (VLT1_fast + zero));
                                                (VL1_out = VL_uf_2_const_expr)]);
                      ((~ ((VL1_fast >= one))) => && [(VLT1_out = (VLT1_fast + VLT_temp));
                                                      (VL1_out = VL_temp)]);
                      (VL_uf_0_in2 = (uf_0_in2 VL_in2 VL_in1));
                      (VR_uf_0_in2 = (uf_0_in2 VR_in2 VR_in1));
                      (VRT1_fast = (VRT_in1 + VRT_in2));
                      (VR1_fast = VR_uf_0_in2);
                      ((VR1_fast >= one) => && [&& [(VL_uf_2_const_expr = uf_2_const_expr);
                                                    (VR_uf_2_const_expr = uf_2_const_expr)];
                                                (VRT1_out = (VRT1_fast + zero));
                                                (VR1_out = VR_uf_2_const_expr)]);
                      ((~ ((VR1_fast >= one))) => && [(VRT1_out = (VRT1_fast + VRT_temp));
                                                      (VR1_out = VR_temp)])]}
  rhs {v##11 : int | [$inv3[v:=v##11]]}
  id 11 tag []
  // META constraint id 11 : (interference with 4) always block id: 3


constraint:
  env [2; 19; 21]
  lhs {v##12 : int | [$inv4[v:=v##12]; (VLT_out >= one)]}
  rhs {v##12 : int | [(VRT_out >= one)]}
  id 12 tag []
  // META constraint id 12 : (tag eq of block 4) always block id: 4




wf:
  env [3; 4; 5; 6; 7; 8; 9; 10]
  reft {v : int | [$inv5]}
  // META wf : (wf of block 5) always block id: 5


wf:
  env [3; 4; 5; 6; 7; 8; 9; 10; 18; 20; 26; 30]
  reft {v : int | [$inv3]}
  // META wf : (wf of block 3) always block id: 3


wf:
  env [3; 4; 5; 6; 7; 8; 9; 10; 17; 18; 19; 20; 21; 22; 26; 30]
  reft {v : int | [$inv4]}
  // META wf : (wf of block 4) always block id: 4





