#!/usr/bin/env zsh
# vim: set foldmethod=marker:

function blue()  { print -P "%F{blue}%B$1%b%f" }
function green() { print -P "%F{green}%B$1%b%f" }
function red()   { print -P "%F{red}%B$1%b%f" }

# Some sanity checks {{{
if [[ "$(uname)" != "Darwin" &&  "$(expr substr $(uname -s) 1 5)" != "Linux"  ]]; then
    echo "${0:t} is not supported in your platform" 1>&2
    exit 1
fi
# }}}

# Argument parsing {{{

zparseopts -D -E -- \
           -ir=JUST_IR -vcgen=JUST_VCGEN \
           -print-finfo=FINFO \
           -prof=PROF \
           -debug=VC_DEBUG \
           -qarmcOpts+:=QARMC_OPTS \
           -solver:=SOLVER \
           -minimize=MINIMIZE \
           -no-output=NO_OUTPUT \
           -no-save=NO_SAVE \
           M:=TOPLEVEL_MODULE \
           -emacs=EMACS \
           -abduction=ABDUCTION \
		   -graphs=GRAPHS \
           h=HELP -help=HELP

if [[ $# -eq 0 || -n "$HELP" ]]; then
    echo "usage: ${0:t} [options] <verilog file>"
    echo "
verylog options:
  --ir
      Just generate the IR file and print it
  --vcgen
      Just generate the file that will be fed to qarmc and print it
  --debug
      Run vcgen but do not print the resulting Horn Clauses
  --print-finfo
      Print finfo
  --emacs
      Opens the output (IR or VC) in emacs
  --minimize
      Run fixpoint w/ minimize
  --qarmcOpts <option>
      The argument of this option is passed to qarmc
  --solver ( hsf | smt | fp )
      Specifies the target of the vcgen (default is hsf)
  --prof
      Run with profiling
  --no-output
      ...
  --no-save
      do not generate .fq files
  --abduction
      run the abduction interactive loop
  -h, --help
      Prints this help

parser options:
  -M <toplevel module name>
      When the verilog file contains multiple modules, this is used to denote the toplevel one"
    [[ -n "$HELP" ]] && exit 0 || exit 1
fi

FILENAME="${@[1]}"
shift 1

if [[ ! -f $FILENAME ]]; then
    echo "'$FILENAME' is not a regular file" 1>&2
    exit 1
elif  [[ "${FILENAME:t:e}" != "v" ]]; then
    echo "'$FILENAME' does not have the verilog extension (.v)" 1>&2
    exit 1
fi

VCGEN_TARGET='fp'

if [[ -n "$PROF" ]]; then
	local -a PROFILE_ARGS
	PROFILE_ARGS=('+RTS' '-p' '-RTS')
fi

# }}}

# Set up global variables {{{
THIS_DIR=${0:A:h}

PREPROCESSED_FILE=${FILENAME:A:h}/.${FILENAME:t:r}.preproc.v

IR_FILE=${FILENAME:A:h}/.${FILENAME:t:r:r:r}.pl

APP=vcgen_fp
VCGEN_FILE=${FILENAME:A:h}/.liquid/${IR_FILE:t}.fq
FQOUT_FILE=${FILENAME:A:h}/.liquid/${IR_FILE:t}.fqout

LOGFILE="$THIS_DIR/.log.$(date +%F-%H-%M-%S)"

CONF_FILE="${THIS_DIR}/configuration.sh"

CONF_SKELETON_FILE="${THIS_DIR}/configuration-skeleton.sh"

QARMC_DEFAULT_OPTS=-get-model

function vcgen_fp() {
	if [[ -n "$GRAPHS" ]]; then
		verylog-graphs $PROFILE_ARGS $FINFO $JUST_VCGEN $MINIMIZE $NO_SAVE $ABDUCTION $@
		exit $?
	else
		vcgen-fp $PROFILE_ARGS $FINFO $JUST_VCGEN $MINIMIZE $NO_SAVE $ABDUCTION $@
	fi
}

# }}}

# Read the configuration file {{{
if [[ -f "$CONF_FILE" ]]; then
    source $CONF_FILE

    IVL=${IVL_DIR:A}/ivl
    IVLPP=${IVL_DIR:A}/ivlpp/ivlpp
    
    if [[ -z "${IVL_DIR}" || ! -x "$IVL" || ! -x "$IVLPP" ]]; then
        echo "IVL_DIR variable in ${CONF_FILE:t} does not seem right" 1>&2
        echo "currently it's set to ${IVL_DIR:A}" 1>&2
        exit 1
    fi
    
else
    echo "missing ${CONF_FILE}" 1>&2
    echo "please use the file ${CONF_SKELETON_FILE:t} as a skeleton to create that file" 1>&2
    exit 1
fi
# }}}

# Stage 1 : Verilog -> IR {{{
# output of this function is redirected to the IR_FILE
print_IR() {
    cat <<EOF
% -*- mode: prolog -*-
% vim: set ft=prolog:
EOF
    
    pushd ${FILENAME:A:h}
    
    this_filename=${FILENAME:t}

    $IVLPP $this_filename 1>$PREPROCESSED_FILE && \
        $IVL $@ -O >(cat) $PREPROCESSED_FILE &>$LOGFILE && \
        sed -n 's|[^@]*@annot{\([^}]*\)}[^@]*|\1.\n|pg' $this_filename
    
    last_err=$?

    if [[ $last_err -ne 0 ]]; then
        if [[ -f "$LOGFILE" && "$(wc -l $LOGFILE | cut -d' ' -f1)" -gt 0 ]]; then
            cat $LOGFILE 1>&2
        else
            echo "error while running $IVL $@ -O >(cat) $PREPROCESSED_FILE, running again ..." 1>&2
            $IVL $@ -O >(cat 1>&2) $PREPROCESSED_FILE
        fi
        echo "\n[PARSER ERROR]" 1>&2
        exit $last_err
    fi
    
    popd

    rm -f "$LOGFILE" "$PREPROCESSED_FILE"
}

print_IR $TOPLEVEL_MODULE > $IR_FILE

if [[ -n "$JUST_IR" ]]; then
	if [[ -z "$NO_OUTPUT" ]]; then
		[[ -n "$EMACS" ]] && emacsclient -c -a emacs --no-wait $IR_FILE || cat $IR_FILE
	fi
    exit 0
fi
# }}}

# Stage 2 : IR -> Verification Conditions {{{

$APP $IR_FILE $VCGEN_FILE $@
last_err=$?
echo "\n"

if [[ $last_err -ne 0 ]]; then
	[[ -z "$NO_OUTPUT" && -f "$FQOUT_FILE" ]] && cat $FQOUT_FILE
    echo "\n"
    red "UNSAFE"
    exit $last_err
fi

if [[ -n "$VC_DEBUG" ]]; then
    exit 0
fi

if [[ -n "$JUST_VCGEN" ]]; then
	if [[ -z "$NO_OUTPUT" ]]; then
		[[ -n "$EMACS" ]] && emacsclient -c -a emacs --no-wait $VCGEN_FILE || cat $VCGEN_FILE
	fi	
    exit 0
fi
# }}}

# Stage 3 : Check Verification Conditions {{{
[[ -f "$FQOUT_FILE" ]] && cat $FQOUT_FILE
echo "\n"
green "SAFE"

# echo
# echo '--------------------------------------------------------------------------------'
# echo '--- Temporary Files ------------------------------------------------------------'
# echo '--------------------------------------------------------------------------------'
# echo "IR : ${IR_FILE//$HOME/~}"
# echo "VC : ${VCGEN_FILE//$HOME/~}"
# echo '--------------------------------------------------------------------------------'


# }}}


